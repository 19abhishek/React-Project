[{"/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/index.js":"1","/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/App.js":"2","/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/DigitButton.js":"3","/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/OperationButton.js":"4"},{"size":142,"mtime":1639990343547,"results":"5","hashOfConfig":"6"},{"size":4923,"mtime":1640082217993,"results":"7","hashOfConfig":"6"},{"size":255,"mtime":1640072275871,"results":"8","hashOfConfig":"6"},{"size":297,"mtime":1640072289826,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"10ksspr",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/index.js",[],["20","21"],"/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/App.js",["22","23","24"],"import { useReducer } from \"react\";\nimport DigitButton from \"./DigitButton\";\nimport classes from \"./App.module.css\";\nimport OperationButton from \"./OperationButton\";\n\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\",\n};\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state;\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n    case ACTIONS.CLEAR:\n      return {};\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return { ...state, currentOperand: null };\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      };\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = \"\";\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"/\":\n      computation = prev / current;\n      break;\n  }\n\n  return computation.toString();\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n});\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split(\".\");\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n  return (\n    <div className={classes.calculator}>\n      <div className={classes.output}>\n        <div className={classes.previousOperand}>\n          {previousOperand}\n          {operation}\n        </div>\n        <div className={classes.currentOperand}>{currentOperand}</div>\n      </div>\n      <button\n        className={classes.spanTwo}\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n      >\n        AC\n      </button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\n        DEL\n      </button>\n      <OperationButton operation=\"/\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        className={classes.spanTwo}\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/DigitButton.js",[],"/Users/abhishek_0819/Documents/Development/React-Project/Calculator-App/src/OperationButton.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":15,"column":3,"nodeType":"31","messageId":"32","endLine":97,"endColumn":4},{"ruleId":"29","severity":1,"message":"30","line":105,"column":3,"nodeType":"31","messageId":"32","endLine":118,"endColumn":4},{"ruleId":"33","severity":1,"message":"34","line":126,"column":10,"nodeType":"35","messageId":"36","endLine":126,"endColumn":23},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'formatOperand' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]